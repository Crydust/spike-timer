package org.example;

import java.awt.Container;
import java.awt.Font;
import java.awt.Frame;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Taskbar;
import java.awt.Toolkit;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.time.Instant;
import java.util.Locale;
import java.util.concurrent.atomic.AtomicBoolean;

import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;

public class View implements PropertyChangeListener {
	private JTextField howLongTextField;
	private JButton startButton;
	private JButton restartButton;
	private JPanel guiFormPanel;
	private JLabel howLongLabel;
	private JProgressBar elapsedProgressBar;
	private JLabel remainingFormattedLabel;

	private final Taskbar taskbar;

	private TimerState timerState = null;
	private Instant now = null;

	public View(Controller controller) {
		if (Taskbar.isTaskbarSupported()) {
			taskbar = Taskbar.getTaskbar();
		} else {
			taskbar = null;
		}
		startButton.addActionListener(e -> {
			final String text = howLongTextField.getText();
			new SwingWorker<Void, Void>() {
				@Override
				protected Void doInBackground() {
					controller.start(text, Instant.now());
					return null;
				}
			}.execute();
		});
		restartButton.addActionListener(e -> new SwingWorker<Void, Void>() {
			@Override
			protected Void doInBackground() {
				controller.restart(Instant.now());
				return null;
			}
		}.execute());
	}

	public JPanel getPanel() {
		return guiFormPanel;
	}

	@Override
	public void propertyChange(PropertyChangeEvent evt) {
		final AtomicBoolean done = new AtomicBoolean(false);
		switch (PropertyName.valueOf(evt.getPropertyName())) {
			case TIMER_STATE -> {
				this.timerState = (TimerState) evt.getNewValue();
			}
			case NOW -> {
				this.now = (Instant) evt.getNewValue();
			}
			case RUNNING -> {
				Boolean oldValue = (Boolean) evt.getOldValue();
				Boolean newValue = (Boolean) evt.getNewValue();
				if (oldValue && !newValue) {
					done.set(true);
				}
			}
		}

		final Container topLevelAncestor = this.getPanel().getTopLevelAncestor();
		final JFrame jFrame;
		if (topLevelAncestor instanceof JFrame) {
			jFrame = (JFrame) topLevelAncestor;
		} else {
			jFrame = null;
		}

		if (this.timerState != null && this.now != null) {
			final String remainingFormatted = timerState.getRemainingFormatted(this.now);
			final double elapsedPercent = timerState.getElapsedPercent(this.now);

			SwingUtilities.invokeLater(() -> {
				remainingFormattedLabel.setText(remainingFormatted);
				elapsedProgressBar.setValue((int) (elapsedPercent * 100));
				if (jFrame != null && taskbar != null) {
					if (elapsedPercent <= 0.0 || elapsedPercent >= 1.0) {
						taskbar.setWindowProgressState(jFrame, Taskbar.State.OFF);
					} else {
						taskbar.setWindowProgressState(jFrame, Taskbar.State.NORMAL);
						taskbar.setWindowProgressValue(jFrame, (int) (elapsedPercent * 100));
					}
				}
				if (done.get()) {
					if (jFrame != null) {
						if (jFrame.getState() != Frame.NORMAL) {
							jFrame.setState(Frame.NORMAL);
						}
						jFrame.toFront();
						jFrame.repaint();
					}
					Toolkit.getDefaultToolkit().beep();
				}
			});
		}
	}

	{
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		guiFormPanel = new JPanel();
		guiFormPanel.setLayout(new GridBagLayout());
		howLongLabel = new JLabel();
		howLongLabel.setText("How long?");
		GridBagConstraints gbc;
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.gridwidth = 2;
		gbc.weightx = 1.0;
		gbc.anchor = GridBagConstraints.WEST;
		guiFormPanel.add(howLongLabel, gbc);
		howLongTextField = new JTextField();
		howLongTextField.setText("30");
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 1;
		gbc.gridwidth = 2;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		guiFormPanel.add(howLongTextField, gbc);
		startButton = new JButton();
		startButton.setText("Start");
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 3;
		gbc.weightx = 1.0;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		guiFormPanel.add(startButton, gbc);
		final JPanel spacer1 = new JPanel();
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 2;
		gbc.fill = GridBagConstraints.VERTICAL;
		guiFormPanel.add(spacer1, gbc);
		final JPanel spacer2 = new JPanel();
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 4;
		gbc.fill = GridBagConstraints.VERTICAL;
		guiFormPanel.add(spacer2, gbc);
		final JPanel spacer3 = new JPanel();
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 8;
		gbc.fill = GridBagConstraints.VERTICAL;
		guiFormPanel.add(spacer3, gbc);
		remainingFormattedLabel = new JLabel();
		Font remainingFormattedLabelFont = this.$$$getFont$$$(null, -1, 36, remainingFormattedLabel.getFont());
		if (remainingFormattedLabelFont != null) remainingFormattedLabel.setFont(remainingFormattedLabelFont);
		remainingFormattedLabel.setText("0h 0m 0s");
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 5;
		gbc.gridwidth = 2;
		gbc.weightx = 1.0;
		gbc.anchor = GridBagConstraints.WEST;
		guiFormPanel.add(remainingFormattedLabel, gbc);
		elapsedProgressBar = new JProgressBar();
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 7;
		gbc.gridwidth = 2;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		guiFormPanel.add(elapsedProgressBar, gbc);
		final JPanel spacer4 = new JPanel();
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 6;
		gbc.fill = GridBagConstraints.VERTICAL;
		guiFormPanel.add(spacer4, gbc);
		restartButton = new JButton();
		restartButton.setText("Restart");
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 3;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		guiFormPanel.add(restartButton, gbc);
	}

	/**
	 * @noinspection ALL
	 */
	private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
		if (currentFont == null) return null;
		String resultName;
		if (fontName == null) {
			resultName = currentFont.getName();
		} else {
			Font testFont = new Font(fontName, Font.PLAIN, 10);
			if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
				resultName = fontName;
			} else {
				resultName = currentFont.getName();
			}
		}
		Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
		boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
		Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
		return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return guiFormPanel;
	}

}
